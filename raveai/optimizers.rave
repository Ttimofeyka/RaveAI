import <std/vector> <std/math> <std/io>

namespace rai {
    struct OptPair {
        uint size;
        float* pointer;
        float* dpointer;
    }

    struct OptCache {
        uint size;
        float* pointer;
    }

    struct RMSProp {
        std::vector<rai::OptPair> pairs;
        std::vector<rai::OptCache> caches;
        float lRate;
        float decay;
        float epsilon;

        rai::RMSProp this(std::vector<rai::OptPair> pairs, float lRate, float decay, float epsilon) {
            rai::RMSProp this;

            this.lRate = lRate;
            this.decay = decay;
            this.epsilon = epsilon;

            this.pairs = pairs;
            this.caches = std::vector<rai::OptCache>();

            for(uint i=0; i<pairs.length; i++) {
                rai::OptCache cache = rai::OptCache{pairs[i].size, std::anew<float>(16, pairs[i].size)};
                std::memset(cache.pointer, 0, cache.size);
                this.caches.add(cache);
            }
        } => this;

        void update {
            for(uint i=0; i<pairs.length; i++) {
                for(uint j=0; j<pairs[i].size; j++) {
                    float grad = pairs[i].dpointer[j];
                    caches[i].pointer[j] = decay * caches[i].pointer[j] + (1f - decay) * grad * grad;
                    pairs[i].pointer[j] -= lRate * grad / (std::math::sqrt(caches[i].pointer[j]) + epsilon);
                }
            }
        }

        void ~this {
            ~(this.pairs);
            ~(this.caches);
        }
    }

    struct SGD {
        std::vector<rai::OptPair> pairs;
        float lRate;

        rai::SGD this(std::vector<rai::OptPair> pairs, float lRate) {
            rai::SGD this;

            this.pairs = pairs;
            this.lRate = lRate;
        } => this;

        void update {
            for(uint i=0; i < pairs.length; i++) {
                for(uint j=0; j<pairs.data[i].size; j++) {
                    rai::OptPair op = pairs.data[i];
                    auto pt = op.pointer;
                    auto dp = op.dpointer;
                    pt[j] = pt[j] - lRate * dp[j];
                }
            }
        }

        void ~this {
            ~(this.pairs);
        }
    }
}